{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport some from 'lodash/some';\nimport XDate from 'xdate';\nimport React, { useMemo } from 'react';\nimport { formatNumbers, isToday } from \"../../dateutils\";\nimport { getDefaultLocale } from \"../../services\";\nimport { xdateToData } from \"../../interface\";\nimport BasicDay from \"./basic\";\nimport PeriodDay from \"./period\";\n\nfunction areEqual(prevProps, nextProps) {\n  var prevPropsWithoutMarkDates = omit(prevProps, 'marking');\n  var nextPropsWithoutMarkDates = omit(nextProps, 'marking');\n  var didPropsChange = some(prevPropsWithoutMarkDates, function (value, key) {\n    return value !== nextPropsWithoutMarkDates[key];\n  });\n  var isMarkingEqual = isEqual(prevProps.marking, nextProps.marking);\n  return !didPropsChange && isMarkingEqual;\n}\n\nvar Day = React.memo(function (props) {\n  var date = props.date,\n      marking = props.marking,\n      dayComponent = props.dayComponent,\n      markingType = props.markingType;\n\n  var _date = date ? new XDate(date) : undefined;\n\n  var _isToday = isToday(_date);\n\n  var markingAccessibilityLabel = useMemo(function () {\n    var label = '';\n\n    if (marking) {\n      if (marking.accessibilityLabel) {\n        return marking.accessibilityLabel;\n      }\n\n      if (marking.selected) {\n        label += 'selected ';\n\n        if (!marking.marked) {\n          label += 'You have no entries for this day ';\n        }\n      }\n\n      if (marking.marked) {\n        label += 'You have entries for this day ';\n      }\n\n      if (marking.startingDay) {\n        label += 'period start ';\n      }\n\n      if (marking.endingDay) {\n        label += 'period end ';\n      }\n\n      if (marking.disabled || marking.disableTouchEvent) {\n        label += 'disabled ';\n      }\n    }\n\n    return label;\n  }, [marking]);\n  var getAccessibilityLabel = useMemo(function () {\n    var today = getDefaultLocale().today || 'today';\n    var formatAccessibilityLabel = getDefaultLocale().formatAccessibilityLabel || 'dddd d MMMM yyyy';\n    return (_isToday ? today : '') + \" \" + (_date == null ? void 0 : _date.toString(formatAccessibilityLabel)) + \" \" + markingAccessibilityLabel;\n  }, [_date, marking, _isToday]);\n  var Component = dayComponent || (markingType === 'period' ? PeriodDay : BasicDay);\n  var dayComponentProps = dayComponent ? {\n    date: xdateToData(date || new XDate())\n  } : undefined;\n  return React.createElement(Component, _extends({}, props, {\n    accessibilityLabel: getAccessibilityLabel\n  }, dayComponentProps), formatNumbers(_date == null ? void 0 : _date.getDate()));\n}, areEqual);\nexport default Day;\nDay.displayName = 'Day';","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/calendar/day/index.js"],"names":["omit","isEqual","some","XDate","React","useMemo","formatNumbers","isToday","getDefaultLocale","xdateToData","BasicDay","PeriodDay","areEqual","prevProps","nextProps","prevPropsWithoutMarkDates","nextPropsWithoutMarkDates","didPropsChange","value","key","isMarkingEqual","marking","Day","memo","props","date","dayComponent","markingType","_date","undefined","_isToday","markingAccessibilityLabel","label","accessibilityLabel","selected","marked","startingDay","endingDay","disabled","disableTouchEvent","getAccessibilityLabel","today","formatAccessibilityLabel","toString","Component","dayComponentProps","getDate","displayName"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\nimport isEqual from 'lodash/isEqual';\nimport some from 'lodash/some';\nimport XDate from 'xdate';\nimport React, { useMemo } from 'react';\nimport { formatNumbers, isToday } from '../../dateutils';\nimport { getDefaultLocale } from '../../services';\nimport { xdateToData } from '../../interface';\nimport BasicDay from './basic';\nimport PeriodDay from './period';\nfunction areEqual(prevProps, nextProps) {\n    const prevPropsWithoutMarkDates = omit(prevProps, 'marking');\n    const nextPropsWithoutMarkDates = omit(nextProps, 'marking');\n    const didPropsChange = some(prevPropsWithoutMarkDates, function (value, key) {\n        //@ts-expect-error\n        return value !== nextPropsWithoutMarkDates[key];\n    });\n    const isMarkingEqual = isEqual(prevProps.marking, nextProps.marking);\n    return !didPropsChange && isMarkingEqual;\n}\nconst Day = React.memo((props) => {\n    const { date, marking, dayComponent, markingType } = props;\n    const _date = date ? new XDate(date) : undefined;\n    const _isToday = isToday(_date);\n    const markingAccessibilityLabel = useMemo(() => {\n        let label = '';\n        if (marking) {\n            if (marking.accessibilityLabel) {\n                return marking.accessibilityLabel;\n            }\n            if (marking.selected) {\n                label += 'selected ';\n                if (!marking.marked) {\n                    label += 'You have no entries for this day ';\n                }\n            }\n            if (marking.marked) {\n                label += 'You have entries for this day ';\n            }\n            if (marking.startingDay) {\n                label += 'period start ';\n            }\n            if (marking.endingDay) {\n                label += 'period end ';\n            }\n            if (marking.disabled || marking.disableTouchEvent) {\n                label += 'disabled ';\n            }\n        }\n        return label;\n    }, [marking]);\n    const getAccessibilityLabel = useMemo(() => {\n        const today = getDefaultLocale().today || 'today';\n        const formatAccessibilityLabel = getDefaultLocale().formatAccessibilityLabel || 'dddd d MMMM yyyy';\n        return `${_isToday ? today : ''} ${_date?.toString(formatAccessibilityLabel)} ${markingAccessibilityLabel}`;\n    }, [_date, marking, _isToday]);\n    const Component = dayComponent || (markingType === 'period' ? PeriodDay : BasicDay);\n    const dayComponentProps = dayComponent ? { date: xdateToData(date || new XDate()) } : undefined;\n    return (\n    //@ts-expect-error\n    <Component {...props} accessibilityLabel={getAccessibilityLabel} {...dayComponentProps}>\n      {formatNumbers(_date?.getDate())}\n    </Component>);\n}, areEqual);\nexport default Day;\nDay.displayName = 'Day';\n"]},"metadata":{},"sourceType":"module"}