{"ast":null,"code":"var XDate = require('xdate');\nexport function padNumber(n) {\n  if (n < 10) {\n    return '0' + n;\n  }\n  return n;\n}\nexport function xdateToData(d) {\n  var dateString = toMarkingFormat(d);\n  return {\n    year: d.getFullYear(),\n    month: d.getMonth() + 1,\n    day: d.getDate(),\n    timestamp: new XDate(dateString, true).getTime(),\n    dateString: dateString\n  };\n}\nexport function parseDate(d) {\n  if (!d) {\n    return;\n  } else if (d.timestamp) {\n    return new XDate(d.timestamp, true);\n  } else if (d instanceof XDate) {\n    return new XDate(toMarkingFormat(d), true);\n  } else if (d.getTime) {\n    var dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n    return new XDate(dateString, true);\n  } else if (d.year) {\n    var _dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n    return new XDate(_dateString, true);\n  } else if (d) {\n    return new XDate(d, true);\n  }\n}\nexport function toMarkingFormat(d) {\n  return d.toString('yyyy-MM-dd');\n}","map":{"version":3,"names":["XDate","require","padNumber","n","xdateToData","d","dateString","toMarkingFormat","year","getFullYear","month","getMonth","day","getDate","timestamp","getTime","parseDate","toString"],"sources":["C:/Users/letha/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/interface.js"],"sourcesContent":["const XDate = require('xdate');\nexport function padNumber(n) {\n    if (n < 10) {\n        return '0' + n;\n    }\n    return n;\n}\nexport function xdateToData(d) {\n    const dateString = toMarkingFormat(d);\n    return {\n        year: d.getFullYear(),\n        month: d.getMonth() + 1,\n        day: d.getDate(),\n        timestamp: new XDate(dateString, true).getTime(),\n        dateString: dateString\n    };\n}\nexport function parseDate(d) {\n    if (!d) {\n        return;\n    }\n    else if (d.timestamp) {\n        // conventional data timestamp\n        return new XDate(d.timestamp, true);\n    }\n    else if (d instanceof XDate) {\n        // xdate\n        return new XDate(toMarkingFormat(d), true);\n    }\n    else if (d.getTime) {\n        // javascript date\n        const dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n        return new XDate(dateString, true);\n    }\n    else if (d.year) {\n        const dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n        return new XDate(dateString, true);\n    }\n    else if (d) {\n        // timestamp number or date formatted as string\n        return new XDate(d, true);\n    }\n}\nexport function toMarkingFormat(d) {\n    return d.toString('yyyy-MM-dd');\n}\n"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,OAAO,SAASC,SAAS,CAACC,CAAC,EAAE;EACzB,IAAIA,CAAC,GAAG,EAAE,EAAE;IACR,OAAO,GAAG,GAAGA,CAAC;EAClB;EACA,OAAOA,CAAC;AACZ;AACA,OAAO,SAASC,WAAW,CAACC,CAAC,EAAE;EAC3B,IAAMC,UAAU,GAAGC,eAAe,CAACF,CAAC,CAAC;EACrC,OAAO;IACHG,IAAI,EAAEH,CAAC,CAACI,WAAW,EAAE;IACrBC,KAAK,EAAEL,CAAC,CAACM,QAAQ,EAAE,GAAG,CAAC;IACvBC,GAAG,EAAEP,CAAC,CAACQ,OAAO,EAAE;IAChBC,SAAS,EAAE,IAAId,KAAK,CAACM,UAAU,EAAE,IAAI,CAAC,CAACS,OAAO,EAAE;IAChDT,UAAU,EAAEA;EAChB,CAAC;AACL;AACA,OAAO,SAASU,SAAS,CAACX,CAAC,EAAE;EACzB,IAAI,CAACA,CAAC,EAAE;IACJ;EACJ,CAAC,MACI,IAAIA,CAAC,CAACS,SAAS,EAAE;IAElB,OAAO,IAAId,KAAK,CAACK,CAAC,CAACS,SAAS,EAAE,IAAI,CAAC;EACvC,CAAC,MACI,IAAIT,CAAC,YAAYL,KAAK,EAAE;IAEzB,OAAO,IAAIA,KAAK,CAACO,eAAe,CAACF,CAAC,CAAC,EAAE,IAAI,CAAC;EAC9C,CAAC,MACI,IAAIA,CAAC,CAACU,OAAO,EAAE;IAEhB,IAAMT,UAAU,GAAGD,CAAC,CAACI,WAAW,EAAE,GAAG,GAAG,GAAGP,SAAS,CAACG,CAAC,CAACM,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGT,SAAS,CAACG,CAAC,CAACQ,OAAO,EAAE,CAAC;IACrG,OAAO,IAAIb,KAAK,CAACM,UAAU,EAAE,IAAI,CAAC;EACtC,CAAC,MACI,IAAID,CAAC,CAACG,IAAI,EAAE;IACb,IAAMF,WAAU,GAAGD,CAAC,CAACG,IAAI,GAAG,GAAG,GAAGN,SAAS,CAACG,CAAC,CAACK,KAAK,CAAC,GAAG,GAAG,GAAGR,SAAS,CAACG,CAAC,CAACO,GAAG,CAAC;IAC7E,OAAO,IAAIZ,KAAK,CAACM,WAAU,EAAE,IAAI,CAAC;EACtC,CAAC,MACI,IAAID,CAAC,EAAE;IAER,OAAO,IAAIL,KAAK,CAACK,CAAC,EAAE,IAAI,CAAC;EAC7B;AACJ;AACA,OAAO,SAASE,eAAe,CAACF,CAAC,EAAE;EAC/B,OAAOA,CAAC,CAACY,QAAQ,CAAC,YAAY,CAAC;AACnC"},"metadata":{},"sourceType":"module"}