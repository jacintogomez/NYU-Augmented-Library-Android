{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport XDate from 'xdate';\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport constants from \"../commons/constants\";\nimport { toMarkingFormat } from \"../interface\";\nimport { extractHeaderProps } from \"../componentUpdater\";\nimport Calendar from \"../calendar\";\nimport CalendarHeader from \"../calendar/header\";\nimport InfiniteList from \"../infinite-list\";\nimport styleConstructor from \"./style\";\nvar NUMBER_OF_PAGES = 50;\nvar CALENDAR_HEIGHT = 360;\n\nvar CalendarList = function CalendarList(props) {\n  var initialDate = props.initialDate,\n      horizontal = props.horizontal,\n      _props$scrollRange = props.scrollRange,\n      scrollRange = _props$scrollRange === void 0 ? NUMBER_OF_PAGES : _props$scrollRange,\n      staticHeader = props.staticHeader,\n      scrollViewProps = props.scrollViewProps,\n      calendarProps = props.calendarProps,\n      testID = props.testID;\n  var style = useRef(styleConstructor(calendarProps == null ? void 0 : calendarProps.theme));\n  var list = useRef();\n\n  var _useState = useState(getDatesArray(initialDate, scrollRange)),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(scrollRange),\n      _useState4 = _slicedToArray(_useState3, 2),\n      positionIndex = _useState4[0],\n      setPositionIndex = _useState4[1];\n\n  var _useState5 = useState(initialDate || items[scrollRange]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentMonth = _useState6[0],\n      setCurrentMonth = _useState6[1];\n\n  var shouldRenderStaticHeader = staticHeader && horizontal;\n  var headerProps = extractHeaderProps(props);\n  var staticHeaderStyle = useMemo(function () {\n    return [style.current.staticHeader, calendarProps == null ? void 0 : calendarProps.headerStyle];\n  }, [calendarProps == null ? void 0 : calendarProps.headerStyle]);\n  useEffect(function () {\n    scrollToMonth(currentMonth);\n  }, [currentMonth]);\n  var getMonthIndex = useCallback(function (month) {\n    if (!month) {\n      return -1;\n    }\n\n    return items.findIndex(function (item) {\n      return item.includes(month.toString('yyyy-MM'));\n    });\n  }, [items]);\n  var scrollToMonth = useCallback(function (month) {\n    if (month) {\n      var index = getMonthIndex(new XDate(month));\n\n      if (index !== -1) {\n        var _list$current;\n\n        var shouldAnimate = constants.isAndroid && !horizontal ? false : true;\n        (_list$current = list.current) == null ? void 0 : _list$current.scrollToOffset == null ? void 0 : _list$current.scrollToOffset(index * constants.screenWidth, 0, shouldAnimate);\n      }\n    }\n  }, [getMonthIndex]);\n  var updateMonth = useCallback(function (count, month) {\n    if (month) {\n      var next = new XDate(month).addMonths(count, true);\n      var nextNext = new XDate(month).addMonths(count * 2, true);\n      var nextNextIndex = getMonthIndex(nextNext);\n\n      if (nextNextIndex !== -1) {\n        setCurrentMonth(toMarkingFormat(next));\n      }\n    }\n  }, [getMonthIndex]);\n  var scrollToNextMonth = useCallback(function (method, month) {\n    if (calendarProps != null && calendarProps.onPressArrowLeft) {\n      calendarProps == null ? void 0 : calendarProps.onPressArrowLeft == null ? void 0 : calendarProps.onPressArrowLeft(method, month);\n    } else {\n      updateMonth(1, month);\n    }\n  }, [updateMonth]);\n  var scrollToPreviousMonth = useCallback(function (method, month) {\n    if (calendarProps != null && calendarProps.onPressArrowRight) {\n      calendarProps == null ? void 0 : calendarProps.onPressArrowRight == null ? void 0 : calendarProps.onPressArrowRight(method, month);\n    } else {\n      updateMonth(-1, month);\n    }\n  }, [updateMonth]);\n  var onPageChange = useCallback(function (pageIndex, _, info) {\n    if (shouldRenderStaticHeader && info.scrolledByUser) {\n      setCurrentMonth(items[pageIndex]);\n    }\n  }, [items]);\n\n  var renderStaticHeader = function renderStaticHeader() {\n    if (shouldRenderStaticHeader) {\n      return React.createElement(CalendarHeader, _extends({}, headerProps, {\n        month: new XDate(currentMonth),\n        onPressArrowRight: scrollToNextMonth,\n        onPressArrowLeft: scrollToPreviousMonth,\n        style: staticHeaderStyle,\n        accessibilityElementsHidden: true,\n        importantForAccessibility: 'no-hide-descendants',\n        testID: 'static-header'\n      }));\n    }\n  };\n\n  var reloadPages = useCallback(function (pageIndex) {\n    horizontal ? replaceItems(pageIndex) : addItems(pageIndex);\n  }, [items]);\n\n  var replaceItems = function replaceItems(index) {\n    var newItems = getDatesArray(items[index], scrollRange);\n    setItems(newItems);\n  };\n\n  var addItems = function addItems(index) {\n    var array = _toConsumableArray(items);\n\n    var startingDate = items[index];\n    var shouldAppend = index > scrollRange;\n\n    if (startingDate) {\n      if (shouldAppend) {\n        for (var i = 2; i <= scrollRange; i++) {\n          var newDate = getDate(startingDate, i);\n          array.push(newDate);\n        }\n      } else {\n        for (var _i = -1; _i > -scrollRange; _i--) {\n          var _newDate = getDate(startingDate, _i);\n\n          array.unshift(_newDate);\n        }\n      }\n\n      setPositionIndex(shouldAppend ? index : scrollRange - 1);\n      setItems(array);\n    }\n  };\n\n  var listContainerStyle = useMemo(function () {\n    return [style.current.flatListContainer, {\n      flex: horizontal ? undefined : 1\n    }];\n  }, [style, horizontal]);\n  var scrollProps = useMemo(function () {\n    return _objectSpread(_objectSpread({}, scrollViewProps), {}, {\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false\n    });\n  }, [scrollViewProps]);\n  var renderItem = useCallback(function (_type, item) {\n    return React.createElement(Calendar, _extends({}, calendarProps, headerProps, {\n      initialDate: item,\n      disableMonthChange: true,\n      hideArrows: !horizontal,\n      onPressArrowRight: scrollToNextMonth,\n      onPressArrowLeft: scrollToPreviousMonth,\n      hideExtraDays: (calendarProps == null ? void 0 : calendarProps.hideExtraDays) || true,\n      style: [style.current.calendar, calendarProps == null ? void 0 : calendarProps.style],\n      headerStyle: horizontal ? calendarProps == null ? void 0 : calendarProps.headerStyle : undefined,\n      testID: testID + \"_\" + item\n    }));\n  }, [calendarProps, scrollToNextMonth, scrollToPreviousMonth]);\n  return React.createElement(View, {\n    style: listContainerStyle\n  }, React.createElement(InfiniteList, {\n    key: \"calendar-list\",\n    ref: list,\n    data: items,\n    renderItem: renderItem,\n    reloadPages: reloadPages,\n    onReachNearEdgeThreshold: Math.round(NUMBER_OF_PAGES * 0.4),\n    extendedState: calendarProps == null ? void 0 : calendarProps.markedDates,\n    isHorizontal: horizontal,\n    style: style.current.container,\n    initialPageIndex: scrollRange,\n    positionIndex: positionIndex,\n    pageHeight: CALENDAR_HEIGHT,\n    pageWidth: constants.screenWidth,\n    onPageChange: onPageChange,\n    scrollViewProps: scrollProps\n  }), renderStaticHeader());\n};\n\nexport default CalendarList;\n\nfunction getDate(date, index) {\n  var d = new XDate(date);\n  d.addMonths(index, true);\n  d.setDate(1);\n  return toMarkingFormat(d);\n}\n\nfunction getDatesArray(date) {\n  var numberOfPages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NUMBER_OF_PAGES;\n  var d = date || new XDate().toString();\n  var array = [];\n\n  for (var index = -numberOfPages; index <= numberOfPages; index++) {\n    var newDate = getDate(d, index);\n    array.push(newDate);\n  }\n\n  return array;\n}","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/calendar-list/new.js"],"names":["XDate","React","useCallback","useEffect","useRef","useState","useMemo","constants","toMarkingFormat","extractHeaderProps","Calendar","CalendarHeader","InfiniteList","styleConstructor","NUMBER_OF_PAGES","CALENDAR_HEIGHT","CalendarList","props","initialDate","horizontal","scrollRange","staticHeader","scrollViewProps","calendarProps","testID","style","theme","list","getDatesArray","items","setItems","positionIndex","setPositionIndex","currentMonth","setCurrentMonth","shouldRenderStaticHeader","headerProps","staticHeaderStyle","current","headerStyle","scrollToMonth","getMonthIndex","month","findIndex","item","includes","toString","index","shouldAnimate","isAndroid","scrollToOffset","screenWidth","updateMonth","count","next","addMonths","nextNext","nextNextIndex","scrollToNextMonth","method","onPressArrowLeft","scrollToPreviousMonth","onPressArrowRight","onPageChange","pageIndex","_","info","scrolledByUser","renderStaticHeader","reloadPages","replaceItems","addItems","newItems","array","startingDate","shouldAppend","i","newDate","getDate","push","unshift","listContainerStyle","flatListContainer","flex","undefined","scrollProps","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","renderItem","_type","hideExtraDays","calendar","Math","round","markedDates","container","date","d","setDate","numberOfPages"],"mappings":"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","sourcesContent":["import XDate from 'xdate';\nimport React, { useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport { View } from 'react-native';\nimport constants from '../commons/constants';\nimport { toMarkingFormat } from '../interface';\nimport { extractHeaderProps } from '../componentUpdater';\nimport Calendar from '../calendar';\nimport CalendarHeader from '../calendar/header';\nimport InfiniteList from '../infinite-list';\nimport styleConstructor from './style';\nconst NUMBER_OF_PAGES = 50;\nconst CALENDAR_HEIGHT = 360;\nconst CalendarList = (props) => {\n    const { initialDate, horizontal, scrollRange = NUMBER_OF_PAGES, staticHeader, scrollViewProps, calendarProps, testID } = props;\n    const style = useRef(styleConstructor(calendarProps?.theme));\n    const list = useRef();\n    const [items, setItems] = useState(getDatesArray(initialDate, scrollRange));\n    const [positionIndex, setPositionIndex] = useState(scrollRange);\n    /** Static Header */\n    const [currentMonth, setCurrentMonth] = useState(initialDate || items[scrollRange]);\n    const shouldRenderStaticHeader = staticHeader && horizontal;\n    const headerProps = extractHeaderProps(props);\n    const staticHeaderStyle = useMemo(() => {\n        return [style.current.staticHeader, calendarProps?.headerStyle];\n    }, [calendarProps?.headerStyle]);\n    useEffect(() => {\n        scrollToMonth(currentMonth);\n    }, [currentMonth]);\n    const getMonthIndex = useCallback((month) => {\n        if (!month) {\n            return -1;\n        }\n        return items.findIndex(item => item.includes(month.toString('yyyy-MM')));\n    }, [items]);\n    const scrollToMonth = useCallback((month) => {\n        if (month) {\n            const index = getMonthIndex(new XDate(month));\n            if (index !== -1) {\n                const shouldAnimate = constants.isAndroid && !horizontal ? false : true;\n                // @ts-expect-error\n                list.current?.scrollToOffset?.(index * constants.screenWidth, 0, shouldAnimate);\n            }\n        }\n    }, [getMonthIndex]);\n    const updateMonth = useCallback((count, month) => {\n        if (month) {\n            const next = new XDate(month).addMonths(count, true);\n            const nextNext = new XDate(month).addMonths(count * 2, true);\n            const nextNextIndex = getMonthIndex(nextNext);\n            if (nextNextIndex !== -1) {\n                setCurrentMonth(toMarkingFormat(next));\n            }\n        }\n    }, [getMonthIndex]);\n    const scrollToNextMonth = useCallback((method, month) => {\n        if (calendarProps?.onPressArrowLeft) {\n            calendarProps?.onPressArrowLeft?.(method, month);\n        }\n        else {\n            updateMonth(1, month);\n        }\n    }, [updateMonth]);\n    const scrollToPreviousMonth = useCallback((method, month) => {\n        if (calendarProps?.onPressArrowRight) {\n            calendarProps?.onPressArrowRight?.(method, month);\n        }\n        else {\n            updateMonth(-1, month);\n        }\n    }, [updateMonth]);\n    const onPageChange = useCallback((pageIndex, _, info) => {\n        if (shouldRenderStaticHeader && info.scrolledByUser) {\n            setCurrentMonth(items[pageIndex]);\n        }\n    }, [items]);\n    const renderStaticHeader = () => {\n        if (shouldRenderStaticHeader) {\n            return (<CalendarHeader {...headerProps} month={new XDate(currentMonth)} onPressArrowRight={scrollToNextMonth} onPressArrowLeft={scrollToPreviousMonth} style={staticHeaderStyle} accessibilityElementsHidden // iOS\n             importantForAccessibility={'no-hide-descendants'} // Android\n             testID={'static-header'}/>);\n        }\n    };\n    /** Data */\n    const reloadPages = useCallback(pageIndex => {\n        horizontal ? replaceItems(pageIndex) : addItems(pageIndex);\n    }, [items]);\n    const replaceItems = (index) => {\n        const newItems = getDatesArray(items[index], scrollRange);\n        setItems(newItems);\n    };\n    const addItems = (index) => {\n        const array = [...items];\n        const startingDate = items[index];\n        const shouldAppend = index > scrollRange;\n        if (startingDate) {\n            if (shouldAppend) {\n                for (let i = 2; i <= scrollRange; i++) {\n                    const newDate = getDate(startingDate, i);\n                    array.push(newDate);\n                }\n            }\n            else {\n                for (let i = -1; i > -scrollRange; i--) {\n                    const newDate = getDate(startingDate, i);\n                    array.unshift(newDate);\n                }\n            }\n            setPositionIndex(shouldAppend ? index : scrollRange - 1);\n            setItems(array);\n        }\n    };\n    /** List */\n    const listContainerStyle = useMemo(() => {\n        return [style.current.flatListContainer, { flex: horizontal ? undefined : 1 }];\n    }, [style, horizontal]);\n    const scrollProps = useMemo(() => {\n        return {\n            ...scrollViewProps,\n            showsHorizontalScrollIndicator: false,\n            showsVerticalScrollIndicator: false\n        };\n    }, [scrollViewProps]);\n    const renderItem = useCallback((_type, item) => {\n        return (<Calendar {...calendarProps} {...headerProps} initialDate={item} disableMonthChange hideArrows={!horizontal} onPressArrowRight={scrollToNextMonth} onPressArrowLeft={scrollToPreviousMonth} hideExtraDays={calendarProps?.hideExtraDays || true} style={[style.current.calendar, calendarProps?.style]} headerStyle={horizontal ? calendarProps?.headerStyle : undefined} testID={`${testID}_${item}`}/>);\n    }, [calendarProps, scrollToNextMonth, scrollToPreviousMonth]);\n    return (<View style={listContainerStyle}>\n      <InfiniteList key=\"calendar-list\" ref={list} data={items} renderItem={renderItem} reloadPages={reloadPages} onReachNearEdgeThreshold={Math.round(NUMBER_OF_PAGES * 0.4)} extendedState={calendarProps?.markedDates} isHorizontal={horizontal} style={style.current.container} initialPageIndex={scrollRange} positionIndex={positionIndex} pageHeight={CALENDAR_HEIGHT} pageWidth={constants.screenWidth} onPageChange={onPageChange} scrollViewProps={scrollProps}/>\n      {renderStaticHeader()}\n    </View>);\n};\nexport default CalendarList;\nfunction getDate(date, index) {\n    const d = new XDate(date);\n    d.addMonths(index, true);\n    // if (index !== 0) {\n    d.setDate(1);\n    // }\n    return toMarkingFormat(d);\n}\nfunction getDatesArray(date, numberOfPages = NUMBER_OF_PAGES) {\n    const d = date || new XDate().toString();\n    const array = [];\n    for (let index = -numberOfPages; index <= numberOfPages; index++) {\n        const newDate = getDate(d, index);\n        array.push(newDate);\n    }\n    return array;\n}\n"]},"metadata":{},"sourceType":"module"}