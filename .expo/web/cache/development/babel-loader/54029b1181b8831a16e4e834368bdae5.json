{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { useRef, useMemo, useContext, useCallback } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { toMarkingFormat } from \"../interface\";\nimport { extractCalendarProps } from \"../componentUpdater\";\nimport styleConstructor from \"./style\";\nimport Calendar from \"../calendar\";\nimport CalendarContext from \"../expandableCalendar/Context\";\nvar CalendarListItem = React.memo(function (props) {\n  var item = props.item,\n      theme = props.theme,\n      scrollToMonth = props.scrollToMonth,\n      horizontal = props.horizontal,\n      calendarHeight = props.calendarHeight,\n      calendarWidth = props.calendarWidth,\n      propsStyle = props.style,\n      headerStyle = props.headerStyle,\n      onPressArrowLeft = props.onPressArrowLeft,\n      onPressArrowRight = props.onPressArrowRight,\n      visible = props.visible;\n  var context = useContext(CalendarContext);\n  var style = useRef(styleConstructor(theme));\n  var calendarProps = extractCalendarProps(props);\n  var dateString = toMarkingFormat(item);\n  var calendarStyle = useMemo(function () {\n    return [{\n      width: calendarWidth,\n      minHeight: calendarHeight\n    }, style.current.calendar, propsStyle];\n  }, [calendarWidth, calendarHeight, propsStyle]);\n  var textStyle = useMemo(function () {\n    return [calendarStyle, style.current.placeholderText];\n  }, [calendarStyle]);\n\n  var _onPressArrowLeft = useCallback(function (method, month) {\n    var monthClone = month == null ? void 0 : month.clone();\n\n    if (monthClone) {\n      if (onPressArrowLeft) {\n        onPressArrowLeft(method, monthClone);\n      } else if (scrollToMonth) {\n        var currentMonth = monthClone.getMonth();\n        monthClone.addMonths(-1);\n\n        while (monthClone.getMonth() === currentMonth) {\n          monthClone.setDate(monthClone.getDate() - 1);\n        }\n\n        scrollToMonth(monthClone);\n      }\n    }\n  }, [onPressArrowLeft, scrollToMonth]);\n\n  var _onPressArrowRight = useCallback(function (method, month) {\n    var monthClone = month == null ? void 0 : month.clone();\n\n    if (monthClone) {\n      if (onPressArrowRight) {\n        onPressArrowRight(method, monthClone);\n      } else if (scrollToMonth) {\n        monthClone.addMonths(1);\n        scrollToMonth(monthClone);\n      }\n    }\n  }, [onPressArrowRight, scrollToMonth]);\n\n  if (!visible) {\n    return React.createElement(Text, {\n      style: textStyle\n    }, dateString);\n  }\n\n  return React.createElement(Calendar, _extends({\n    hideArrows: true,\n    hideExtraDays: true\n  }, calendarProps, {\n    current: dateString,\n    style: calendarStyle,\n    headerStyle: horizontal ? headerStyle : undefined,\n    disableMonthChange: true,\n    onPressArrowLeft: horizontal ? _onPressArrowLeft : onPressArrowLeft,\n    onPressArrowRight: horizontal ? _onPressArrowRight : onPressArrowRight,\n    context: context\n  }));\n});\nexport default CalendarListItem;\nCalendarListItem.displayName = 'CalendarListItem';","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/calendar-list/item.js"],"names":["React","useRef","useMemo","useContext","useCallback","toMarkingFormat","extractCalendarProps","styleConstructor","Calendar","CalendarContext","CalendarListItem","memo","props","item","theme","scrollToMonth","horizontal","calendarHeight","calendarWidth","propsStyle","style","headerStyle","onPressArrowLeft","onPressArrowRight","visible","context","calendarProps","dateString","calendarStyle","width","minHeight","current","calendar","textStyle","placeholderText","_onPressArrowLeft","method","month","monthClone","clone","currentMonth","getMonth","addMonths","setDate","getDate","_onPressArrowRight","undefined","displayName"],"mappings":"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","sourcesContent":["import React, { useRef, useMemo, useContext, useCallback } from 'react';\nimport { Text } from 'react-native';\nimport { toMarkingFormat } from '../interface';\nimport { extractCalendarProps } from '../componentUpdater';\nimport styleConstructor from './style';\nimport Calendar from '../calendar';\nimport CalendarContext from '../expandableCalendar/Context';\nconst CalendarListItem = React.memo((props) => {\n    const { item, theme, scrollToMonth, horizontal, calendarHeight, calendarWidth, style: propsStyle, headerStyle, onPressArrowLeft, onPressArrowRight, visible } = props;\n    const context = useContext(CalendarContext);\n    const style = useRef(styleConstructor(theme));\n    const calendarProps = extractCalendarProps(props);\n    const dateString = toMarkingFormat(item);\n    const calendarStyle = useMemo(() => {\n        return [\n            {\n                width: calendarWidth,\n                minHeight: calendarHeight\n            },\n            style.current.calendar,\n            propsStyle\n        ];\n    }, [calendarWidth, calendarHeight, propsStyle]);\n    const textStyle = useMemo(() => {\n        return [calendarStyle, style.current.placeholderText];\n    }, [calendarStyle]);\n    const _onPressArrowLeft = useCallback((method, month) => {\n        const monthClone = month?.clone();\n        if (monthClone) {\n            if (onPressArrowLeft) {\n                onPressArrowLeft(method, monthClone);\n            }\n            else if (scrollToMonth) {\n                const currentMonth = monthClone.getMonth();\n                monthClone.addMonths(-1);\n                // Make sure we actually get the previous month, not just 30 days before currentMonth.\n                while (monthClone.getMonth() === currentMonth) {\n                    monthClone.setDate(monthClone.getDate() - 1);\n                }\n                scrollToMonth(monthClone);\n            }\n        }\n    }, [onPressArrowLeft, scrollToMonth]);\n    const _onPressArrowRight = useCallback((method, month) => {\n        const monthClone = month?.clone();\n        if (monthClone) {\n            if (onPressArrowRight) {\n                onPressArrowRight(method, monthClone);\n            }\n            else if (scrollToMonth) {\n                monthClone.addMonths(1);\n                scrollToMonth(monthClone);\n            }\n        }\n    }, [onPressArrowRight, scrollToMonth]);\n    if (!visible) {\n        return (<Text style={textStyle}>{dateString}</Text>);\n    }\n    return (<Calendar hideArrows={true} hideExtraDays={true} {...calendarProps} current={dateString} style={calendarStyle} headerStyle={horizontal ? headerStyle : undefined} disableMonthChange onPressArrowLeft={horizontal ? _onPressArrowLeft : onPressArrowLeft} onPressArrowRight={horizontal ? _onPressArrowRight : onPressArrowRight} context={context} // ???\n    />);\n});\nexport default CalendarListItem;\nCalendarListItem.displayName = 'CalendarListItem';\n"]},"metadata":{},"sourceType":"module"}