{"ast":null,"code":"import { isUndefined, isDate, isString, isNumber } from 'lodash';\nimport XDate from 'xdate';\nvar _require = require(\"../interface\"),\n  padNumber = _require.padNumber,\n  toMarkingFormat = _require.toMarkingFormat;\nexport function getCalendarDateString(date) {\n  if (!isUndefined(date)) {\n    if (isDate(date) && !isNaN(date.getFullYear())) {\n      return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n    } else if (isString(date)) {\n      return toMarkingFormat(new XDate(date, false));\n    } else if (isNumber(date)) {\n      return toMarkingFormat(new XDate(date, true));\n    }\n    throw 'Invalid Date';\n  }\n}\nexport function getDefaultLocale() {\n  return XDate.locales[XDate.defaultLocale];\n}\nexport default {\n  getCalendarDateString: getCalendarDateString,\n  getDefaultLocale: getDefaultLocale\n};","map":{"version":3,"names":["isUndefined","isDate","isString","isNumber","XDate","require","padNumber","toMarkingFormat","getCalendarDateString","date","isNaN","getFullYear","getMonth","getDate","getDefaultLocale","locales","defaultLocale"],"sources":["C:/Users/letha/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/services/index.js"],"sourcesContent":["import { isUndefined, isDate, isString, isNumber } from 'lodash';\nimport XDate from 'xdate';\nconst { padNumber, toMarkingFormat } = require('../interface');\nexport function getCalendarDateString(date) {\n    if (!isUndefined(date)) {\n        if (isDate(date) && !isNaN(date.getFullYear())) {\n            return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n        }\n        else if (isString(date)) {\n            // issue with strings and XDate's utc-mode - returns one day before\n            return toMarkingFormat(new XDate(date, false));\n        }\n        else if (isNumber(date)) {\n            return toMarkingFormat(new XDate(date, true));\n        }\n        throw 'Invalid Date';\n    }\n}\nexport function getDefaultLocale() {\n    return XDate.locales[XDate.defaultLocale];\n}\nexport default {\n    getCalendarDateString,\n    getDefaultLocale\n};\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,QAAQ;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,eAAuCC,OAAO,gBAAgB;EAAtDC,SAAS,YAATA,SAAS;EAAEC,eAAe,YAAfA,eAAe;AAClC,OAAO,SAASC,qBAAqB,CAACC,IAAI,EAAE;EACxC,IAAI,CAACT,WAAW,CAACS,IAAI,CAAC,EAAE;IACpB,IAAIR,MAAM,CAACQ,IAAI,CAAC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,WAAW,EAAE,CAAC,EAAE;MAC5C,OAAOF,IAAI,CAACE,WAAW,EAAE,GAAG,GAAG,GAAGL,SAAS,CAACG,IAAI,CAACG,QAAQ,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGN,SAAS,CAACG,IAAI,CAACI,OAAO,EAAE,CAAC;IACtG,CAAC,MACI,IAAIX,QAAQ,CAACO,IAAI,CAAC,EAAE;MAErB,OAAOF,eAAe,CAAC,IAAIH,KAAK,CAACK,IAAI,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC,MACI,IAAIN,QAAQ,CAACM,IAAI,CAAC,EAAE;MACrB,OAAOF,eAAe,CAAC,IAAIH,KAAK,CAACK,IAAI,EAAE,IAAI,CAAC,CAAC;IACjD;IACA,MAAM,cAAc;EACxB;AACJ;AACA,OAAO,SAASK,gBAAgB,GAAG;EAC/B,OAAOV,KAAK,CAACW,OAAO,CAACX,KAAK,CAACY,aAAa,CAAC;AAC7C;AACA,eAAe;EACXR,qBAAqB,EAArBA,qBAAqB;EACrBM,gBAAgB,EAAhBA;AACJ,CAAC"},"metadata":{},"sourceType":"module"}