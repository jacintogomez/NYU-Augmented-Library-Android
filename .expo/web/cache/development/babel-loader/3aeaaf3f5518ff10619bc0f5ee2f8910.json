{"ast":null,"code":"import XDate from 'xdate';\nimport constants from \"../../commons/constants\";\nimport { generateDay } from \"../../dateutils\";\nexport function calcTimeByPosition(yPosition, hourBlockHeight) {\n  var time = yPosition / hourBlockHeight;\n  time = Math.floor(time * 2) / 2;\n  var hour = Math.floor(time);\n  var minutes = (time - Math.floor(time)) * 60;\n  return {\n    hour: hour,\n    minutes: minutes\n  };\n}\nexport function calcDateByPosition(xPosition, timelineLeftInset) {\n  var numberOfDays = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var firstDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new XDate();\n  var timelineWidth = constants.screenWidth - timelineLeftInset;\n  var dayWidth = timelineWidth / numberOfDays;\n  var positionIndex = Math.floor((xPosition - timelineLeftInset) / dayWidth);\n  return generateDay(firstDate, positionIndex);\n}\nexport function buildTimeString() {\n  var hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var minutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return (date + \" \" + hour.toString().padStart(2, '0') + \":\" + minutes.toString().padStart(2, '0') + \":00\").trimStart();\n}\nexport function calcTimeOffset(hourBlockHeight, hour, minutes) {\n  var now = new Date();\n  var h = hour != null ? hour : now.getHours();\n  var m = minutes != null ? minutes : now.getMinutes();\n  return (h + m / 60) * hourBlockHeight;\n}","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/timeline/helpers/presenter.js"],"names":["XDate","constants","generateDay","calcTimeByPosition","yPosition","hourBlockHeight","time","Math","floor","hour","minutes","calcDateByPosition","xPosition","timelineLeftInset","numberOfDays","firstDate","timelineWidth","screenWidth","dayWidth","positionIndex","buildTimeString","date","toString","padStart","trimStart","calcTimeOffset","now","Date","h","getHours","m","getMinutes"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP;AACA,SAASC,WAAT;AACA,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAuCC,eAAvC,EAAwD;AAC3D,MAAIC,IAAI,GAAGF,SAAS,GAAGC,eAAvB;AACAC,EAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAI,GAAG,CAAlB,IAAuB,CAA9B;AACA,MAAMG,IAAI,GAAGF,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAb;AACA,MAAMI,OAAO,GAAG,CAACJ,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAR,IAA4B,EAA5C;AACA,SAAO;AAAEG,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,OAAO,EAAPA;AAAR,GAAP;AACH;AACD,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAuCC,iBAAvC,EAAqG;AAAA,MAA3CC,YAA2C,uEAA5B,CAA4B;AAAA,MAAzBC,SAAyB,uEAAb,IAAIf,KAAJ,EAAa;AACxG,MAAMgB,aAAa,GAAGf,SAAS,CAACgB,WAAV,GAAwBJ,iBAA9C;AACA,MAAMK,QAAQ,GAAGF,aAAa,GAAGF,YAAjC;AACA,MAAMK,aAAa,GAAGZ,IAAI,CAACC,KAAL,CAAW,CAACI,SAAS,GAAGC,iBAAb,IAAkCK,QAA7C,CAAtB;AACA,SAAOhB,WAAW,CAACa,SAAD,EAAYI,aAAZ,CAAlB;AACH;AACD,OAAO,SAASC,eAAT,GAA2D;AAAA,MAAlCX,IAAkC,uEAA3B,CAA2B;AAAA,MAAxBC,OAAwB,uEAAd,CAAc;AAAA,MAAXW,IAAW,uEAAJ,EAAI;AAC9D,SAAO,CAAGA,IAAH,SAAWZ,IAAI,CAACa,QAAL,GAAgBC,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,CAAX,SAA+Cb,OAAO,CAACY,QAAR,GAAmBC,QAAnB,CAA4B,CAA5B,EAA+B,GAA/B,CAA/C,UAAwFC,SAAxF,EAAP;AACH;AACD,OAAO,SAASC,cAAT,CAAwBpB,eAAxB,EAAyCI,IAAzC,EAA+CC,OAA/C,EAAwD;AAC3D,MAAMgB,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAMC,CAAC,GAAGnB,IAAH,WAAGA,IAAH,GAAWiB,GAAG,CAACG,QAAJ,EAAlB;AACA,MAAMC,CAAC,GAAGpB,OAAH,WAAGA,OAAH,GAAcgB,GAAG,CAACK,UAAJ,EAArB;AACA,SAAO,CAACH,CAAC,GAAGE,CAAC,GAAG,EAAT,IAAezB,eAAtB;AACH","sourcesContent":["import XDate from 'xdate';\nimport constants from '../../commons/constants';\nimport { generateDay } from '../../dateutils';\nexport function calcTimeByPosition(yPosition, hourBlockHeight) {\n    let time = yPosition / hourBlockHeight;\n    time = Math.floor(time * 2) / 2;\n    const hour = Math.floor(time);\n    const minutes = (time - Math.floor(time)) * 60;\n    return { hour, minutes };\n}\nexport function calcDateByPosition(xPosition, timelineLeftInset, numberOfDays = 1, firstDate = new XDate()) {\n    const timelineWidth = constants.screenWidth - timelineLeftInset;\n    const dayWidth = timelineWidth / numberOfDays;\n    const positionIndex = Math.floor((xPosition - timelineLeftInset) / dayWidth);\n    return generateDay(firstDate, positionIndex);\n}\nexport function buildTimeString(hour = 0, minutes = 0, date = '') {\n    return `${date} ${hour.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00`.trimStart();\n}\nexport function calcTimeOffset(hourBlockHeight, hour, minutes) {\n    const now = new Date();\n    const h = hour ?? now.getHours();\n    const m = minutes ?? now.getMinutes();\n    return (h + m / 60) * hourBlockHeight;\n}\n"]},"metadata":{},"sourceType":"module"}