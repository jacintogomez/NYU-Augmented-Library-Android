{"ast":null,"code":"import isUndefined from 'lodash/isUndefined';\nimport isDate from 'lodash/isDate';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport XDate from 'xdate';\n\nvar _require = require(\"../dateutils\"),\n    getLocale = _require.getLocale;\n\nvar _require2 = require(\"../interface\"),\n    padNumber = _require2.padNumber,\n    toMarkingFormat = _require2.toMarkingFormat;\n\nexport function getCalendarDateString(date) {\n  if (!isUndefined(date)) {\n    if (isDate(date) && !isNaN(date.getFullYear())) {\n      return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n    } else if (isString(date)) {\n      return toMarkingFormat(new XDate(date, false));\n    } else if (isNumber(date)) {\n      return toMarkingFormat(new XDate(date, true));\n    }\n\n    throw 'Invalid Date';\n  }\n}\nexport function getDefaultLocale() {\n  return getLocale();\n}\nexport default {\n  getCalendarDateString: getCalendarDateString,\n  getDefaultLocale: getDefaultLocale\n};","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/services/index.js"],"names":["isUndefined","isDate","isString","isNumber","XDate","require","getLocale","padNumber","toMarkingFormat","getCalendarDateString","date","isNaN","getFullYear","getMonth","getDate","getDefaultLocale"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,eAAsBC,OAAO,gBAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,gBAAuCD,OAAO,gBAA9C;AAAA,IAAQE,SAAR,aAAQA,SAAR;AAAA,IAAmBC,eAAnB,aAAmBA,eAAnB;;AACA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACxC,MAAI,CAACV,WAAW,CAACU,IAAD,CAAhB,EAAwB;AACpB,QAAIT,MAAM,CAACS,IAAD,CAAN,IAAgB,CAACC,KAAK,CAACD,IAAI,CAACE,WAAL,EAAD,CAA1B,EAAgD;AAC5C,aAAOF,IAAI,CAACE,WAAL,KAAqB,GAArB,GAA2BL,SAAS,CAACG,IAAI,CAACG,QAAL,KAAkB,CAAnB,CAApC,GAA4D,GAA5D,GAAkEN,SAAS,CAACG,IAAI,CAACI,OAAL,EAAD,CAAlF;AACH,KAFD,MAGK,IAAIZ,QAAQ,CAACQ,IAAD,CAAZ,EAAoB;AAErB,aAAOF,eAAe,CAAC,IAAIJ,KAAJ,CAAUM,IAAV,EAAgB,KAAhB,CAAD,CAAtB;AACH,KAHI,MAIA,IAAIP,QAAQ,CAACO,IAAD,CAAZ,EAAoB;AACrB,aAAOF,eAAe,CAAC,IAAIJ,KAAJ,CAAUM,IAAV,EAAgB,IAAhB,CAAD,CAAtB;AACH;;AACD,UAAM,cAAN;AACH;AACJ;AACD,OAAO,SAASK,gBAAT,GAA4B;AAC/B,SAAOT,SAAS,EAAhB;AACH;AACD,eAAe;AACXG,EAAAA,qBAAqB,EAArBA,qBADW;AAEXM,EAAAA,gBAAgB,EAAhBA;AAFW,CAAf","sourcesContent":["import isUndefined from 'lodash/isUndefined';\nimport isDate from 'lodash/isDate';\nimport isString from 'lodash/isString';\nimport isNumber from 'lodash/isNumber';\nimport XDate from 'xdate';\nconst { getLocale } = require('../dateutils');\nconst { padNumber, toMarkingFormat } = require('../interface');\nexport function getCalendarDateString(date) {\n    if (!isUndefined(date)) {\n        if (isDate(date) && !isNaN(date.getFullYear())) {\n            return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n        }\n        else if (isString(date)) {\n            // issue with strings and XDate's utc-mode - returns one day before\n            return toMarkingFormat(new XDate(date, false));\n        }\n        else if (isNumber(date)) {\n            return toMarkingFormat(new XDate(date, true));\n        }\n        throw 'Invalid Date';\n    }\n}\nexport function getDefaultLocale() {\n    return getLocale();\n}\nexport default {\n    getCalendarDateString,\n    getDefaultLocale\n};\n"]},"metadata":{},"sourceType":"module"}