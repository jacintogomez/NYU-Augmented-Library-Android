{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { Camera } from 'expo-camera';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React, { useState, useEffect } from 'react';\nexport default function ARVision() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return React.createElement(View, null);\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Camera, {\n    style: styles.camera,\n    type: type\n  }, React.createElement(View, {\n    style: {\n      flex: 5\n    }\n  }), React.createElement(View, {\n    style: styles.movementContainer\n  }, React.createElement(View, {\n    style: [styles.arrowContainer, {\n      flex: 3\n    }]\n  }, React.createElement(AntDesign, {\n    name: \"caretup\",\n    size: 24,\n    color: \"white\"\n  })), React.createElement(View, {\n    style: [styles.arrowContainer, {\n      flex: 3,\n      justifyContent: 'space-around',\n      flexDirection: 'row'\n    }]\n  }, React.createElement(AntDesign, {\n    name: \"caretleft\",\n    size: 24,\n    color: \"white\"\n  }), React.createElement(AntDesign, {\n    name: \"caretright\",\n    size: 24,\n    color: \"white\"\n  })), React.createElement(View, {\n    style: [styles.arrowContainer, {\n      flex: 4,\n      justifyContent: \"flex-end\",\n      paddingBottom: 20\n    }]\n  }, React.createElement(AntDesign, {\n    name: \"caretdown\",\n    size: 24,\n    color: \"white\"\n  }))), React.createElement(View, {\n    style: styles.buttonContainer\n  }, React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n    }\n  }, React.createElement(Text, {\n    style: styles.text\n  }, \" Flip \")))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  movementContainer: {\n    flex: 1,\n    backgroundColor: \"transparent\"\n  },\n  movement: {\n    alignSelf: 'flex-end'\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    backgroundColor: 'green',\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  },\n  arrowContainer: {\n    flex: 1,\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/Screens/ARVision.js"],"names":["AntDesign","Camera","React","useState","useEffect","ARVision","hasPermission","setHasPermission","Constants","Type","back","type","setType","requestCameraPermissionsAsync","status","styles","container","camera","flex","movementContainer","arrowContainer","justifyContent","flexDirection","paddingBottom","buttonContainer","button","front","text","StyleSheet","create","backgroundColor","movement","alignSelf","margin","alignItems","fontSize","color"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,SAAQC,MAAR,QAAqB,aAArB;;;;;AAEA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,kBAA0CF,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOG,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAAwBJ,QAAQ,CAACF,MAAM,CAACO,SAAP,CAAiBC,IAAjB,CAAsBC,IAAvB,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBH,MAAM,CAACY,6BAAP,EADxB;;AAAA;AAAA;AACQC,cAAAA,MADR,yBACQA,MADR;AAECP,cAAAA,gBAAgB,CAACO,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAIR,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD,OAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD,8BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAES,MAAM,CAACC;AAApB,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAED,MAAM,CAACE,MAAtB;AAA8B,IAAA,IAAI,EAAEN;AAApC,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACO,MAAAA,IAAI,EAAE;AAAP;AAAb,IADF,EAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACI;AAApB,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACJ,MAAM,CAACK,cAAR,EAAwB;AAACF,MAAAA,IAAI,EAAE;AAAP,KAAxB;AAAb,KACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAE,SAAjB;AAA4B,IAAA,IAAI,EAAE,EAAlC;AAAsC,IAAA,KAAK,EAAE;AAA7C,IADF,CADF,EAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACH,MAAM,CAACK,cAAR,EAAwB;AAACF,MAAAA,IAAI,EAAC,CAAN;AAASG,MAAAA,cAAc,EAAC,cAAxB;AAAuCC,MAAAA,aAAa,EAAC;AAArD,KAAxB;AAAb,KACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAE,WAAjB;AAA8B,IAAA,IAAI,EAAE,EAApC;AAAwC,IAAA,KAAK,EAAE;AAA/C,IADF,EAEE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAE,YAAjB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAAyC,IAAA,KAAK,EAAE;AAAhD,IAFF,CALF,EASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACP,MAAM,CAACK,cAAR,EAAwB;AAACF,MAAAA,IAAI,EAAC,CAAN;AAASG,MAAAA,cAAc,EAAC,UAAxB;AAAoCE,MAAAA,aAAa,EAAC;AAAlD,KAAxB;AAAb,KACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAE,WAAjB;AAA8B,IAAA,IAAI,EAAE,EAApC;AAAwC,IAAA,KAAK,EAAE;AAA/C,IADF,CATF,CAJF,EAiBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAER,MAAM,CAACS;AAApB,KACE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAET,MAAM,CAACU,MADhB;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbb,MAAAA,OAAO,CACLD,IAAI,KAAKV,MAAM,CAACO,SAAP,CAAiBC,IAAjB,CAAsBC,IAA/B,GACIT,MAAM,CAACO,SAAP,CAAiBC,IAAjB,CAAsBiB,KAD1B,GAEIzB,MAAM,CAACO,SAAP,CAAiBC,IAAjB,CAAsBC,IAHrB,CAAP;AAKD;AARH,KASE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACY;AAApB,cATF,CADF,CAjBF,CADF,CADF;AAmCD;AAGD,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,SAAS,EAAE;AACTE,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BD,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AADA,GAJuB;AAO/BC,EAAAA,iBAAiB,EAAE;AACjBD,IAAAA,IAAI,EAAE,CADW;AAEjBY,IAAAA,eAAe,EAAE;AAFA,GAPY;AAW/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AADH,GAXqB;AAc/BR,EAAAA,eAAe,EAAE;AACfN,IAAAA,IAAI,EAAE,CADS;AAEfY,IAAAA,eAAe,EAAE,aAFF;AAGfR,IAAAA,aAAa,EAAE,KAHA;AAIfW,IAAAA,MAAM,EAAE;AAJO,GAdc;AAoB/BR,EAAAA,MAAM,EAAE;AACNP,IAAAA,IAAI,EAAE,GADA;AAENY,IAAAA,eAAe,EAAE,OAFX;AAGNE,IAAAA,SAAS,EAAE,UAHL;AAINE,IAAAA,UAAU,EAAE;AAJN,GApBuB;AA0B/BP,EAAAA,IAAI,EAAE;AACJQ,IAAAA,QAAQ,EAAE,EADN;AAEJC,IAAAA,KAAK,EAAE;AAFH,GA1ByB;AA8B/BhB,EAAAA,cAAc,EAAE;AAACF,IAAAA,IAAI,EAAE,CAAP;AAAUgB,IAAAA,UAAU,EAAE;AAAtB;AA9Be,CAAlB,CAAf","sourcesContent":["import {AntDesign} from '@expo/vector-icons';\r\nimport {Camera} from 'expo-camera';\r\nimport {View, Text, TouchableOpacity, StyleSheet} from 'react-native';\r\nimport React, {useState, useEffect} from 'react';\r\n\r\nexport default function ARVision() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const {status} = await Camera.requestCameraPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n  if (hasPermission === null) {\r\n    return <View />;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return(\r\n    <View style={styles.container}>\r\n      <Camera style={styles.camera} type={type}>\r\n        <View style={{flex: 5}}>\r\n\r\n        </View>\r\n        <View style={styles.movementContainer}>\r\n          <View style={[styles.arrowContainer, {flex: 3}]}>\r\n            <AntDesign name={\"caretup\"} size={24} color={\"white\"}>\r\n            </AntDesign>\r\n          </View>\r\n          <View style={[styles.arrowContainer, {flex:3, justifyContent:'space-around',flexDirection:'row',}]}>\r\n            <AntDesign name={\"caretleft\"} size={24} color={\"white\"} />\r\n            <AntDesign name={\"caretright\"} size={24} color={\"white\"} />\r\n          </View>\r\n          <View style={[styles.arrowContainer, {flex:4, justifyContent:\"flex-end\", paddingBottom:20}]}>\r\n            <AntDesign name={\"caretdown\"} size={24} color={\"white\"} />\r\n          </View>\r\n        </View>\r\n        <View style={styles.buttonContainer}>\r\n          <TouchableOpacity\r\n            style={styles.button}\r\n            onPress={() => {\r\n              setType(\r\n                type === Camera.Constants.Type.back\r\n                  ? Camera.Constants.Type.front\r\n                  : Camera.Constants.Type.back\r\n              );\r\n            }}>\r\n            <Text style={styles.text}> Flip </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </Camera>\r\n    </View>\r\n  );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  camera: {\r\n    flex: 1,\r\n  },\r\n  movementContainer: {\r\n    flex: 1,\r\n    backgroundColor: \"transparent\"\r\n  },\r\n  movement: {\r\n    alignSelf: 'flex-end'\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n    backgroundColor: 'transparent',\r\n    flexDirection: 'row',\r\n    margin: 20,\r\n  },\r\n  button: {\r\n    flex: 0.1,\r\n    backgroundColor: 'green',\r\n    alignSelf: 'flex-end',\r\n    alignItems: 'center',\r\n  },\r\n  text: {\r\n    fontSize: 18,\r\n    color: 'white',\r\n  },\r\n  arrowContainer: {flex: 1, alignItems: 'center'},\r\n});\r\n"]},"metadata":{},"sourceType":"module"}