{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars';\nimport ScreenTemplate from \"../screenTemplate\";\nimport RoomObject from \"../components/RoomObject\";\nvar month = {\n  \"2022-04-04\": {\n    room1: {\n      name: 'RHS349',\n      availableSlots: 2\n    },\n    room2: {\n      name: 'RHS350',\n      availableSlots: 0\n    },\n    room3: {\n      name: 'RHS349',\n      availableSlots: 1\n    },\n    room4: {\n      name: 'RHS349',\n      availableSlots: 20\n    }\n  },\n  \"2022-04-05\": {\n    room1: {\n      name: 'RHS349',\n      availableSlots: 20\n    },\n    room2: {\n      name: 'RHS350',\n      availableSlots: 20\n    },\n    room3: {\n      name: 'RHS349',\n      availableSlots: 20\n    },\n    room4: {\n      name: 'RHS349',\n      availableSlots: 20\n    }\n  },\n  \"2022-04-06\": {\n    room1: {\n      name: 'RHS349',\n      availableSlots: 0\n    },\n    room2: {\n      name: 'RHS350',\n      availableSlots: 0\n    },\n    room3: {\n      name: 'RHS349',\n      availableSlots: 0\n    },\n    room4: {\n      name: 'RHS349',\n      availableSlots: 0\n    }\n  }\n};\n\nfunction getDayCount(month) {\n  for (var _i = 0, _Object$entries = Object.entries(month); _i < _Object$entries.length; _i++) {\n    var day = _Object$entries[_i];\n    month[day[0]] = Object.values(day[1]).reduce(function (prev, curr) {\n      return prev + curr.availableSlots;\n    }, 0);\n  }\n\n  for (var _i2 = 0, _Object$keys = Object.keys(month); _i2 < _Object$keys.length; _i2++) {\n    var date = _Object$keys[_i2];\n    console.log(month[date]);\n\n    if (month[date] === 0) {\n      month[date] = {\n        startingDay: true,\n        color: '#eb344c',\n        endingDay: true,\n        opacity: 0\n      };\n    } else if (month[date] < TOTAL * .2) {\n      month[date] = {\n        startingDay: true,\n        color: '#e67f2c',\n        endingDay: true\n      };\n    } else if (month[date] >= TOTAL * .2 && month[date] < TOTAL * .8) {\n      month[date] = {\n        startingDay: true,\n        color: '#f7e731',\n        endingDay: true\n      };\n    } else {\n      month[date] = {\n        startingDay: true,\n        color: '#71eb34',\n        endingDay: true,\n        opacity: 0\n      };\n    }\n  }\n\n  return month;\n}\n\nvar TOTAL = 80;\nvar markedDatesVar = {\n  \"2022-04-06\": {\n    color: \"red\",\n    endingDay: true,\n    startingDay: true\n  }\n};\nexport default function ReserveScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  return React.createElement(ScreenTemplate, null, React.createElement(ScrollView, null, React.createElement(View, {\n    style: {\n      height: 50,\n      backgroundColor: 'white',\n      justifyContent: 'center',\n      borderBottomWidth: 2,\n      borderColor: 'black',\n      borderStyle: 'dashed'\n    }\n  }, React.createElement(Text, null, \"Pick date\")), React.createElement(Calendar, {\n    markingType: 'period',\n    markedDates: data,\n    onDayPress: function onDayPress(day) {\n      navigation.navigate(\"PickTime\", {\n        day: day\n      });\n    }\n  }), React.createElement(Button, {\n    onPress: function onPress() {\n      setData(getDayCount(month));\n      console.log(\"hi\");\n    },\n    title: \"Refresh days\",\n    color: \"#841584\"\n  })));\n}","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/Screens/Reserve Screen/ReserveScreen.js"],"names":["React","useState","Calendar","CalendarList","Agenda","ScreenTemplate","RoomObject","month","room1","name","availableSlots","room2","room3","room4","getDayCount","Object","entries","day","values","reduce","prev","curr","keys","date","console","log","startingDay","color","endingDay","opacity","TOTAL","markedDatesVar","ReserveScreen","navigation","data","setData","height","backgroundColor","justifyContent","borderBottomWidth","borderColor","borderStyle","navigate"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {\r\n  View,\r\n  ScrollView,\r\n  Text,\r\n    Button,\r\n} from 'react-native';\r\nimport { Calendar, CalendarList, Agenda } from 'react-native-calendars'\r\nimport ScreenTemplate from \"../screenTemplate\";\r\nimport RoomObject from \"../components/RoomObject\";\r\n\r\n\r\nconst month = { // test month\r\n    \"2022-04-04\": {\r\n        room1: {name: 'RHS349', availableSlots: 2},\r\n        room2: {name: 'RHS350', availableSlots: 0},\r\n        room3: {name: 'RHS349', availableSlots: 1},\r\n        room4: {name: 'RHS349', availableSlots: 20},\r\n    },\r\n    \"2022-04-05\" : {\r\n        room1: {name: 'RHS349', availableSlots: 20},\r\n        room2: {name: 'RHS350', availableSlots: 20},\r\n        room3: {name: 'RHS349', availableSlots: 20},\r\n        room4: {name: 'RHS349', availableSlots: 20},\r\n    },\r\n    \"2022-04-06\" : {\r\n        room1: {name: 'RHS349', availableSlots: 0},\r\n        room2: {name: 'RHS350', availableSlots: 0},\r\n        room3: {name: 'RHS349', availableSlots: 0},\r\n        room4: {name: 'RHS349', availableSlots: 0},\r\n    },\r\n}\r\n\r\n// Returns an object that contains the\r\n// amount of days available per room\r\nfunction getDayCount(month) {\r\n\r\n    // Formats all days so its { \"YYYY-MM-DD\" : Num of available rooms}\r\n    for (let day of Object.entries(month)) {\r\n        month[day[0]] = Object.values(day[1]).reduce(\r\n            (prev, curr) => prev + curr.availableSlots, 0\r\n        )\r\n    }\r\n\r\n    // Labels all days corresponding to fullness.\r\n    for (let date of Object.keys(month)) {\r\n        console.log(month[date])\r\n        if (month[date] === 0) {\r\n            month[date] = {startingDay: true, color: '#eb344c', endingDay: true, opacity: 0}\r\n        }\r\n        else if (month[date] < TOTAL * .2) {\r\n            month[date] = {startingDay: true, color: '#e67f2c', endingDay: true}\r\n        }\r\n        else if (month[date] >= TOTAL * .2 && month[date] < TOTAL * .8) {\r\n            month[date] = {startingDay: true, color: '#f7e731', endingDay: true}\r\n        }\r\n        else {\r\n            month[date] = {startingDay: true, color: '#71eb34', endingDay: true, opacity: 0}\r\n        }\r\n    }\r\n    return month\r\n}\r\nconst TOTAL = 80 // Total amount of rooms per day\r\n\r\nlet markedDatesVar = {\r\n    \"2022-04-06\": {\r\n        color: \"red\",\r\n        endingDay: true,\r\n        startingDay: true,\r\n    },\r\n}\r\n\r\nexport default function ReserveScreen({navigation}) {\r\n    const [data, setData] = useState({})\r\n  return(\r\n    <ScreenTemplate>\r\n      <ScrollView>\r\n        <View\r\n          style={{\r\n            height: 50,\r\n            backgroundColor:'white',\r\n            justifyContent:'center',\r\n            borderBottomWidth:2,\r\n            borderColor:'black',\r\n            borderStyle:'dashed'\r\n          }}>\r\n          <Text>Pick date</Text>\r\n        </View>\r\n          <Calendar markingType={'period'}\r\n                    markedDates={data}\r\n                    onDayPress={day => {\r\n                        navigation.navigate(\"PickTime\", {\r\n                            day: day\r\n                        })\r\n                    }}\r\n          />\r\n          <Button onPress={ () => {\r\n              setData(getDayCount(month))\r\n              console.log(\"hi\")\r\n          }} title={\"Refresh days\"} color={\"#841584\"}/>\r\n        \r\n      </ScrollView>\r\n    </ScreenTemplate>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}