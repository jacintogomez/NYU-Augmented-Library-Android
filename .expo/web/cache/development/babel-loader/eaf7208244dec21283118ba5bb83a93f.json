{"ast":null,"code":"var XDate = require('xdate');\n\nexport function padNumber(n) {\n  if (n < 10) {\n    return '0' + n;\n  }\n\n  return n;\n}\nexport function xdateToData(date) {\n  var d = date instanceof XDate ? date : new XDate(date);\n  var dateString = toMarkingFormat(d);\n  return {\n    year: d.getFullYear(),\n    month: d.getMonth() + 1,\n    day: d.getDate(),\n    timestamp: new XDate(dateString, true).getTime(),\n    dateString: dateString\n  };\n}\nexport function parseDate(d) {\n  if (!d) {\n    return;\n  } else if (d.timestamp) {\n    return new XDate(d.timestamp, true);\n  } else if (d instanceof XDate) {\n    return new XDate(toMarkingFormat(d), true);\n  } else if (d.getTime) {\n    var dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n    return new XDate(dateString, true);\n  } else if (d.year) {\n    var _dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n\n    return new XDate(_dateString, true);\n  } else if (d) {\n    return new XDate(d, true);\n  }\n}\nexport function toMarkingFormat(d) {\n  if (!isNaN(d.getTime())) {\n    var year = \"\" + d.getFullYear();\n    var month = d.getMonth() + 1;\n    var doubleDigitMonth = month < 10 ? \"0\" + month : \"\" + month;\n    var day = d.getDate();\n    var doubleDigitDay = day < 10 ? \"0\" + day : \"\" + day;\n    return year + '-' + doubleDigitMonth + '-' + doubleDigitDay;\n  }\n\n  return 'Invalid Date';\n}","map":{"version":3,"sources":["C:/Users/Eileen Twimasi/WebstormProjects/NYU-Library-Frontend/node_modules/react-native-calendars/src/interface.js"],"names":["XDate","require","padNumber","n","xdateToData","date","d","dateString","toMarkingFormat","year","getFullYear","month","getMonth","day","getDate","timestamp","getTime","parseDate","isNaN","doubleDigitMonth","doubleDigitDay"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,OAAO,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACzB,MAAIA,CAAC,GAAG,EAAR,EAAY;AACR,WAAO,MAAMA,CAAb;AACH;;AACD,SAAOA,CAAP;AACH;AACD,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC9B,MAAMC,CAAC,GAAGD,IAAI,YAAYL,KAAhB,GAAwBK,IAAxB,GAA+B,IAAIL,KAAJ,CAAUK,IAAV,CAAzC;AACA,MAAME,UAAU,GAAGC,eAAe,CAACF,CAAD,CAAlC;AACA,SAAO;AACHG,IAAAA,IAAI,EAAEH,CAAC,CAACI,WAAF,EADH;AAEHC,IAAAA,KAAK,EAAEL,CAAC,CAACM,QAAF,KAAe,CAFnB;AAGHC,IAAAA,GAAG,EAAEP,CAAC,CAACQ,OAAF,EAHF;AAIHC,IAAAA,SAAS,EAAE,IAAIf,KAAJ,CAAUO,UAAV,EAAsB,IAAtB,EAA4BS,OAA5B,EAJR;AAKHT,IAAAA,UAAU,EAAEA;AALT,GAAP;AAOH;AACD,OAAO,SAASU,SAAT,CAAmBX,CAAnB,EAAsB;AACzB,MAAI,CAACA,CAAL,EAAQ;AACJ;AACH,GAFD,MAGK,IAAIA,CAAC,CAACS,SAAN,EAAiB;AAElB,WAAO,IAAIf,KAAJ,CAAUM,CAAC,CAACS,SAAZ,EAAuB,IAAvB,CAAP;AACH,GAHI,MAIA,IAAIT,CAAC,YAAYN,KAAjB,EAAwB;AAEzB,WAAO,IAAIA,KAAJ,CAAUQ,eAAe,CAACF,CAAD,CAAzB,EAA8B,IAA9B,CAAP;AACH,GAHI,MAIA,IAAIA,CAAC,CAACU,OAAN,EAAe;AAEhB,QAAMT,UAAU,GAAGD,CAAC,CAACI,WAAF,KAAkB,GAAlB,GAAwBR,SAAS,CAACI,CAAC,CAACM,QAAF,KAAe,CAAhB,CAAjC,GAAsD,GAAtD,GAA4DV,SAAS,CAACI,CAAC,CAACQ,OAAF,EAAD,CAAxF;AACA,WAAO,IAAId,KAAJ,CAAUO,UAAV,EAAsB,IAAtB,CAAP;AACH,GAJI,MAKA,IAAID,CAAC,CAACG,IAAN,EAAY;AACb,QAAMF,WAAU,GAAGD,CAAC,CAACG,IAAF,GAAS,GAAT,GAAeP,SAAS,CAACI,CAAC,CAACK,KAAH,CAAxB,GAAoC,GAApC,GAA0CT,SAAS,CAACI,CAAC,CAACO,GAAH,CAAtE;;AACA,WAAO,IAAIb,KAAJ,CAAUO,WAAV,EAAsB,IAAtB,CAAP;AACH,GAHI,MAIA,IAAID,CAAJ,EAAO;AAER,WAAO,IAAIN,KAAJ,CAAUM,CAAV,EAAa,IAAb,CAAP;AACH;AACJ;AACD,OAAO,SAASE,eAAT,CAAyBF,CAAzB,EAA4B;AAC/B,MAAI,CAACY,KAAK,CAACZ,CAAC,CAACU,OAAF,EAAD,CAAV,EAAyB;AACrB,QAAMP,IAAI,QAAMH,CAAC,CAACI,WAAF,EAAhB;AACA,QAAMC,KAAK,GAAGL,CAAC,CAACM,QAAF,KAAe,CAA7B;AACA,QAAMO,gBAAgB,GAAGR,KAAK,GAAG,EAAR,SAAiBA,KAAjB,QAA8BA,KAAvD;AACA,QAAME,GAAG,GAAGP,CAAC,CAACQ,OAAF,EAAZ;AACA,QAAMM,cAAc,GAAGP,GAAG,GAAG,EAAN,SAAeA,GAAf,QAA0BA,GAAjD;AACA,WAAOJ,IAAI,GAAG,GAAP,GAAaU,gBAAb,GAAgC,GAAhC,GAAsCC,cAA7C;AACH;;AACD,SAAO,cAAP;AACH","sourcesContent":["const XDate = require('xdate');\nexport function padNumber(n) {\n    if (n < 10) {\n        return '0' + n;\n    }\n    return n;\n}\nexport function xdateToData(date) {\n    const d = date instanceof XDate ? date : new XDate(date);\n    const dateString = toMarkingFormat(d);\n    return {\n        year: d.getFullYear(),\n        month: d.getMonth() + 1,\n        day: d.getDate(),\n        timestamp: new XDate(dateString, true).getTime(),\n        dateString: dateString\n    };\n}\nexport function parseDate(d) {\n    if (!d) {\n        return;\n    }\n    else if (d.timestamp) {\n        // conventional data timestamp\n        return new XDate(d.timestamp, true);\n    }\n    else if (d instanceof XDate) {\n        // xdate\n        return new XDate(toMarkingFormat(d), true);\n    }\n    else if (d.getTime) {\n        // javascript date\n        const dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n        return new XDate(dateString, true);\n    }\n    else if (d.year) {\n        const dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n        return new XDate(dateString, true);\n    }\n    else if (d) {\n        // timestamp number or date formatted as string\n        return new XDate(d, true);\n    }\n}\nexport function toMarkingFormat(d) {\n    if (!isNaN(d.getTime())) {\n        const year = `${d.getFullYear()}`;\n        const month = d.getMonth() + 1;\n        const doubleDigitMonth = month < 10 ? `0${month}` : `${month}`;\n        const day = d.getDate();\n        const doubleDigitDay = day < 10 ? `0${day}` : `${day}`;\n        return year + '-' + doubleDigitMonth + '-' + doubleDigitDay;\n    }\n    return 'Invalid Date';\n}\n"]},"metadata":{},"sourceType":"module"}